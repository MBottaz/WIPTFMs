import requests
import json
import pandas as pd

def calculate_pv_module_output(latitude, longitude, efficiency, azimuth, slope, module_power=0.5, system_losses=15, save_output="N"):

    # Parameters:
    # latitude (float): Latitude of the location (degrees)
    # longitude (float): Longitude of the location (degrees)
    # efficiency (float): Efficiency of the PV system after losses (percentage between 0 and 1)
    # azimuth (float): Azimuth angle of the panels in degrees (0° = south, 90° = west, 180° = north, 270° = east)
    # slope (float): Tilt angle of the panels in degrees (0° = horizontal, 90° = vertical)
    # module_power (float): Rated power of the PV module in kW (default is 0.5 kW)
    # system_losses (float): Total system losses as a percentage (default is 15%)
    # save_output (str): Option to save output as JSON ("Y" for yes, "N" for no, default is "N")

    # The output DataFrame contains the following columns:
    # 1. time: Timestamp of the data point (format: YYYYMMDD:HHMM)
    # 2. P: AC power output (kW) - The total electrical power generated by the PV system.
    # 3. G(i): In-plane irradiance (W/m²) - Solar radiation incident on the surface of the panel.
    # 4. H_sun: Sun height angle (°) - The angle of the sun relative to the horizon.
    # 5. T2m: Air temperature (°C) - Temperature of the air 2 meters above the ground.
    # 6. WS10m: Wind speed at 10 meters (m/s) - Wind speed measured 10 meters above the ground.
    # 7. Int: Irradiance intensity (W/m²) - Intensity of sunlight reaching the surface (could include direct and diffuse irradiance).

    
    # PVGIS API endpoint
    url = "https://re.jrc.ec.europa.eu/api/seriescalc"

    # Define API call parameters
    params = {
        "lat": latitude,  # Latitude of the location
        "lon": longitude,  # Longitude of the location
        "outputformat": "json",  # Output format: JSON
        "pvcalculation": "1",  # PV system calculation mode
        "peakpower": module_power,  # Rated power of the PV module/system in kW
        "angle": int(slope),  # Tilt angle of the PV panels in degrees
        "aspect": int(azimuth),  # Azimuth angle of the PV panels in degrees
        "efficiency": efficiency,  # Efficiency of the system after losses
        "raddatabase": "PVGIS-ERA5",  # Solar radiation database used
        "startyear": "2023",  # Start year for the data (valid range 2005-2023)
        "endyear": "2023",  # End year for the data (valid range 2005-2023)
        "timeseries": "1",  # Request for hourly output data
        "mountingplace": "free",  # Mounting place type: "free" for free-standing panels
        "loss": system_losses  # Total system losses (e.g., 15% losses)
    }

    # Send the API request to the PVGIS service
    response = requests.get(url, params=params)

    # Check if the request was successful (HTTP status code 200)
    if response.status_code == 200:
        try:
            # Parse the JSON response from the PVGIS API
            data = response.json()

            # Extract hourly timeseries data and convert to DataFrame
            timeseries = data["outputs"]["hourly"]
            df = pd.DataFrame(timeseries)
            # Convert time from string to datetime format for easier manipulation
            df["time"] = pd.to_datetime(df["time"], format="%Y%m%d:%H%M")

            # Optionally save the JSON response to a local file
            if save_output.upper() == "Y":
                with open("energy_production.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)
                print("JSON file with energy production has been saved as 'energy_production.json'.")
            
            # print("Data processing complete!")
            return df
        except ValueError:
            # Handle potential errors when parsing the JSON data
            print("Error decoding the response data.")
            return None
    else:
        # If the API request fails, handle the error and print details
        try:
            # Attempt to parse JSON error response for more information
            error_info = response.json()
            print(f"Error details: {error_info}")
        except ValueError:
            # If the error response is not JSON, print the raw response text
            print(f"Error: {response.text}")
        
        return None

def process_multiple_pv_configurations(latitude, longitude, efficiency, *triplets):
    """
    Calculate PV module outputs for multiple configurations and return a DataFrame.
    
    Parameters:
    - latitude (float): Latitude of the location
    - longitude (float): Longitude of the location
    - efficiency (float): Efficiency of the system (0 to 1)
    - *triplets: Each triplet represents (slope, azimuth, PV power) for different configurations.
    
    Returns:
    - pd.DataFrame: DataFrame containing timestamp and "P" values for each configuration.
    """
    
    # Initialize an empty DataFrame to store the results
    final_df = pd.DataFrame()
    
    # Loop over each triplet of (slope, azimuth, module_power)
    for slope, azimuth, module_power in triplets:
        # Call the calculate_pv_module_output function for the current configuration
        df = calculate_pv_module_output(latitude, longitude, efficiency, azimuth, slope, module_power)
        
        if df is not None:
            # Extract the "P" column from the returned DataFrame
            p_column = df["P"]
            
            # If final_df is empty, initialize it with the "time" column from the first configuration
            if final_df.empty:
                final_df["time"] = df["time"]
            
            # Add the "P" column for this configuration to the final DataFrame
            final_df[f"P_{slope}_{azimuth}_{module_power}"] = p_column
    
    # Return the final DataFrame with results
    return final_df

# Example usage
latitude = 44.516  # Provided latitude
longitude = 11.518  # Provided longitude
efficiency = 0.23  # 23% efficiency

PV_subsets = [
    (35, 23, 0.47),  # Slope, Azimuth, PV Power
    (35, -157, 0.47),  # Slope, Azimuth, PV Power
    (35, 113, 0.47)   # Slope, Azimuth, PV Power
]

"""
azimuth = 23  # azimuth angle in degrees (0 = South, 90 = West, -90 = East, 180 = North)
slope = 35  # 35 degree tilt
PV_power = 0.47  # Peak power in kW (e.g., 300W = 0.3kW)
"""

df = process_multiple_pv_configurations(latitude, longitude, efficiency, *PV_subsets)

if isinstance(df, pd.DataFrame):
    print(df.head())
else:
    print("Returned value is not a DataFrame.")